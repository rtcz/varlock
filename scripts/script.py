import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Hash import MD5
import random
import numpy as np
import sys
import binascii
import os
from aes import BinAES
from bitarray import bitarray
from bitarray import bits2bytes

BASE_2_BIN = {'A': '00', 'T': '01', 'G': '10', 'C': '11'}
BIN_2_BASE = {'00': 'A', '01': 'T', '10': 'G', '11': 'C'}
BASES = ['A', 'T', 'G', 'C']
DIFF_BIT_SIZE = 16
DIFF_POS_BIT_SIZE = 14
MAX_DIFF_POS = 2 ** DIFF_POS_BIT_SIZE


# def gen_seed():
#     return long(hexlify(os.urandom(2500)), 16)


def multi_rand(p_dist):
    return np.argmax(np.random.multinomial(1, p_dist))


def secure_multi_rand(p_dist, rand_value):
    p_level = 0
    for i in range(len(p_dist)):
        p_level += p_dist[i]
        if rand_value < p_level:
            return i
    
    raise ValueError(
        "sum of probability distribution %d must be greater then probability value %d" % (p_dist, rand_value))


def diff(seq1, seq2):
    result = ''
    if len(seq1) != len(seq2):
        raise Exception("sequences must have same length")
    for i in range(len(seq1)):
        if seq1[i] != seq2[i]:
            result += str(i).zfill(3) + seq1[i]
    
    return result


def bin_diff(seq1, seq2):
    barr = bitarray()
    absolute_pos = 0
    if len(seq1) != len(seq2):
        raise Exception("sequences must have same length")
    for i in range(len(seq1)):
        if seq1[i] != seq2[i]:
            relative_pos = i - absolute_pos
            pos_bits = bitarray(bin(relative_pos)[2:])
            if pos_bits.length() > DIFF_POS_BIT_SIZE:
                raise Exception("relative position too big %d" % relative_pos)
            
            padding_size = (DIFF_POS_BIT_SIZE - pos_bits.length())
            padding_bits = bitarray('0' * padding_size)
            
            barr += padding_bits + pos_bits
            barr += BASE_2_BIN[seq1[i]]
            absolute_pos = i
    
    return barr


# TODO use secure random
# https://www.dlitz.net/software/pycrypto/api/current/Crypto.Random.random-module.html
def mutate(seq, mut_p=0, mut_map_p={}):
    anon_seq = ""
    rnd = random.SystemRandom()
    for i in range(len(seq)):
        base = seq[i]
        p = rnd.random()
        if i in mut_map_p:
            # anon_seq += BASES[multi_rand(mut_map_p[i])]
            anon_seq += BASES[secure_multi_rand(mut_map_p[i], p)]
        elif mut_p > p:
            anon_seq += rnd.choice(BASES)
        else:
            anon_seq += base
    
    return anon_seq


def restore(mut_seq, diff_bits):
    seq = mut_seq
    diff_count = diff_bits.length() / DIFF_BIT_SIZE
    absolute_pos = 0
    for i in range(0, diff_count):
        start = i * DIFF_BIT_SIZE
        pos_bits = diff_bits[start:start + DIFF_POS_BIT_SIZE]
        base_bits = diff_bits[start + DIFF_POS_BIT_SIZE:start + DIFF_BIT_SIZE]
        
        absolute_pos += int(pos_bits.to01(), 2)
        seq = seq[:absolute_pos] + BIN_2_BASE[base_bits.to01()] + seq[absolute_pos + 1:]
    
    return seq


# input
mut_p = 0.1
mut_map_p = {
    0: [0.8, 0.1, 0.05, 0.05]
}
seq = "ACGTGTTCCGGCTGTTATCCTGCATCGGAACCTCAATCATGCATCGCACCAGCGTATTCGTGTCATCTAGGAGGGGCGCGTAGGATAAATAATTCAATTA"
# seq = "AAGGCGTTACCCCAATCGTTTTCCGTCGGATTTGCTATAGCCCCTGAACGCTACATGCACGAAACCAAGTTATGTATGCACTGGGTCATCAATAGGACATAGCCTTGTAGTTAACATGTAGCCCGGCCGTATTAGTACAGTAGAGCCTTCACCGGCATTCTGTTTATTAAGTTATTTCTACAGCAAAACGATCATATGCAGATCCGCAGTGCGCGGTAGAGACACGTCCACCCGGCTGCTCTGTAATAGGGACTAAAAAAGTGATGATTATCATGAGTGCCCCGTTATGGTCGTGTTCGATCAGAGCGCTCTTACGAGCAGTCGTATGCTTTCTCGAATTCCGTGCGGTTAAGCGTGACAGTCCCAGTGAACCCACAAAACGTGATGGCAGTCCATGCGATCATACGCAAGAAGGATGGTCTCCAGACACCGGCGCACCAGTTTTCACGCCGAAAGCATAAACGAGGAGCACAAATGAGAGTGTTTGAACTGGACCTGTAGTTTCTCTACGAAGAACACCTTGAGCTGTTGCGTTGTTGCGCTGCCTAGATGCAGTGTCGCACGTATCACTTTTGCCTCAACGACTGCTGCTTTCGCTGTAACCCTAGACAGACAACAGTAAGCGCCTTTTGTAGGCAAGAGCTCCGCCTGTGACTAACTGCGCCAAAACGTCTTCCAATCCCCTTATCCAATTTAACTCACCGAATTCTTACAATTTAGACCCTAATATCACATCATTAGACACTAATTGCCTCTGCCAAAATTCTGTCCACAAGCGTTTTAGTTCGCCCCAGTAAAGTTGTCAATAACGACCACCAAATCCGCATGTTACGGGACTTCTTATTAATTCTTTTTTCGTGGGGAGCAGCGGATCTTAATGGATGGCGCCAGGTGGTATGGAAGCTAATAGCGCGGGTGAGAGGGTAATCAGCCGTCTCCACCAACACAACGCTATCGGGTCATACTATAAGATTCCGCAATGCGACTACTTATAAGATGC"
# seq = "CTTAACGGTATCCGCAACTTGCGATGTGCCTGCTATGCTTAAATGCATATCTCGCCCAGTAGCTTTCCAATATGAGAGCATCAATTGTAGATCGGGCCGGGATAATCATGTCGTCACGGAACTTACTGTAAGAGTAATAATTTAAAAGAGATGTCGGTTTGCTGGTTCACGTAAAGGTCCCTCGCGCTACCTCTAAGTAAGTGAGCGGTCGTGACATTATCCCTGATTTTCTCACTACTATTAGTACTCACGGCGCAATTCCACCACAGCCTTGTCTCGCCAGAATGCCAGTCAGCATAAGGAAGAGCTCAAGGCAGGTCAACTCGCACTGTGAGGGTCACATGGGCGTTCGGCACTACCGACACGAACCTCAGTTAGCGTACATCCTACCAGAGGTCTGTGGCCCCGTGGTCAAAAGTGCGGGTTTCGTATTTGCTGCTCGTCAGTACTTTCAGAATCATGACCTGCACGGCAAAGAGACGCTTATTATGGAGCTCGACATGGCAATAACGCGACGAATCTACGTCACGACGAGAATAGTGTAAACGAAGCTGCTGACGGCGGAAGCGTCAAAGGGGTCTGTGAATTGTTATTCGCGAAAAACATCCGTCCCCGTGGGGGATAGTCACCGACGCCGTTTTATAGAAGCCTAGGGGAACAGGTTGGTTTAACTAGCTTAAGAAAGTAAATTCTGGGATTATACTGTAGTAATCACTAATTTACGGTGAGGGTTTTATGGCGGATCTTTACAAATTCAAGCCAGGTGATTTCAACAAATTTTGCTGACGATTTAGGCGCACTATCCCCTAAACTACAAATTAGAAAATAGCGTTCCTTGACGGCTAGAATTACCTACCGGCCTCCACCATACCTTCGATATTCGCGCCCACTCTCCCATTAATCCGCACAAGTGGATGTGATGCGATTGCCCGCTAAGATATTCTAACGTGTAACGCAGATGAGTATTCTACAGAGTTGCCGTACGCGTTGAACACTTCACGGATGATAGGAATTTGCGTATAGAGCGTGTCATTGAGGGGTTATACACCCGTAGACTACAACGGGCCCGGCTCAATCAGAACTCGAGTGCCTTGAATAACATACTCATCACTAAACATTCTCAACAGTCAATCGAGCAAGTCCATTATCAACGAGTGTGTTGCAGTTTTATTCTCTCGCCAGCATTGTAATAGGCACTAAAAGAGTGATGATAGTCATGAGTGCTGAGCTAAGACGGCGTCGGTGCATAGCGGACTTTCGGTCAGTCGCAATTCCTCACGAGACCCGTCCTGTTGAGCGTATCACTCTCAATGTACAAGCAACCCGAGAAGGCTGTGCCTGGACTCAACCGGATGCAGGATGGACTCCAGACACGGGGCCACCACTCTTCACACGTAAAGCAAGAACGTCGAGCAGTCATGAAAGTCTTAGTACCGCACGTGCCATCTTACTGCGAATATTGCCTGAAGCTGTACCGTTATTGGGGGGCAAAGATGAAGTTCTCCTCTTTTCATAATTGTACTGACGACAGCCGTGTTCCCGGTTTCTTCAGAGGTTAAAGAATAAGGGCTTATTGTAGGCAGAGGGACGCCCTTTTAGTGGCTGGCGTTAAGTATCTTCGGACCCCCTTGTCTATCCAGATTAATCGAATTCTCTCATTTAGGACCCTAGTAAGTCATCATTGGTATTTGAATGCGACCCCGAAGAAACCGCCTAAAAATGTCAATGGTTGGTCCACTAAACTTCATTTAATCAACTCCTAAATCGGCGCGATAGGCCATTAGAGGTTTAATTTTGTATGGCAAGGTACTTCCGATCTTAATGAATGGCCGGAAGAGGTACGGACGCGATATGCGGGGGTGAGAGGGCAAATAGGCAGGTTCGCCTTCGTCACGCTAGGAGGCAATTCTATAAGAATGCACATTGCATCGATACATAAAATGTCTCGACCGCATGCGCAACTTGTGAAGTGTCTACTATCCCTAAGCCCATTTCCCGCATAATAACCCCTGATTGTGTCCGCATCTGATGCTACCCGGGTTGAGTTAGCGTCGAGCTCGCGGAACTTATTGCATGAGTAGAGTTGAGTAAGAGCTGTTAGATGGCTCGCTGAGCTAATAGTTGCCCACAGAACGTCAAGATTAGAGAACGGTCGTAGCATTATCGGAGGTTCTCTAACTACTATCAGTACCCGTGTCTCGACTCTGCCGCGGCTACCTATCGCCTGAAAGCCAGTTGGTGTTAAGGGGTGCTCTGTCCAGGACGCCACGCGTAGTGAGACTTACATGTTCGTTGGGTTCACCCGACTCGGACCTGAGTCGACCAAGGACGCACTCGAGCTCTGAGCCCTACTGTCGAGAAATATGTATCTCGCCCCCGCAGCTTGCCAGCTCTTTCAGTATCATGGAGCCCATGGTTGAATGACTCCTATAACGAACTTCGACATGGCAAAATCCCCCCCTCGCGACTTCTAGAGAAGAAGAGTACTGACTTGAGCGCTCCCAGCACTTCAGCCAAGGAAGTTACCAATTTCTTGTTTCCGAATGACACGCGTCTCCTTGCGGGTAAATCGCCGACCGCAGAACTTACGAGCCAGGGGAAACAGTAAGGCCTAATTAGGTAAAGGGAGTAAGTGCTCGAACGGTTCAGTTGTAACCATATACTTACGCTGGATCTTCTCCGGCGAATTTTTACCGTCACCAACTACGAGATTTGAGGTAAACCAAATGAGCACATAGTGGCGCTATCCGACTATTTCCAAATTGTAACATATCGTTCCATGAAGGCCAGAGTTACTTACCGGCCCTTTCCATGCGCGCGCCATACCCTCCTAGTTCCCCGGTTATCTCTCCGAGGAGAGAGTGAGCGATCCTCCGTTAACATATTGTTACCAATGACGTAGCTATGTATTTTGCACAGGTAGCCAACGGGTTTCACATTTCACAGATAGTGGGGATCCCGGCAAAGGGCGTATATTTGCGGTCCAACATAGGCGTAAACTACGATGGCACCTACTCAGACGCAGCTCGTGCGGCGTAAATAACGTACTCATCCCAACTGATTCTCGGCAATCTACGGAGCGACATGATTATCAACAGCTGTCTAGCAGTTCTAATCTTTTGCCATGGTCGTAAAAGCCTCCAAGAGATTGATCATACCTATCGGCACAGAAGTGACACGACGCCGATGGGTAGCGGACTTTAGGTCAACCACAGTTCGGTAGGGGACAGGCCCTGCGGCGTACATCACTTTGTATGTGCAACGTGCCCAAGTGGCGCCAGGCAAGACTCAGCTGGTTCCTGTGTTAGCTCGAGGCTAGGCATGACAGCTCTTTGAACATGGGCTGGGGGCCTCGAACGGTCGAGAAGCCCATAGTACCTCGGATACCAAGTTGCGCAGGCTATAGCTTGAAGCTGTACTATTTCAGGGGGGGAGCCCTGATGGTCTCTTCTTCTGATGACTCAACTCGCTAGGGTCGTGAAGTCGATTCCTTCGATGGTTAAAAATCAAAGGCTCAGAGTGCAGACTGGAGCGCCCATCTAACGGTTCGCATCTCGAATGCTCGGTCGCCTTTCACATTCCGCGAAAATTCATACCGCTCATTCACTAGGTTGCGAAGTCTACACTGATATATGAATCCGAGCTAGAGCAGGGCTCTTAAAATTCGGAGTCGTTGATGCTCAATACTCCAATCGGTTTTTTCGTGCACCACCGCGAGTGGCTGACAAGGGTTTGACATTGAGTAGCAAGGCAGTTCCGGGCTGAATGAAGCGCCGGGAAAGGTACGCGCCTGGTATGGCAGGATTAAGAAGCCAATACAAAGGCTACATCCTCACTCGGATGGAGGCAAACGCAGAACAATGGTTACTTTTTCGATACGTGAAACATGTCCCACGGTAGCCCAAAGACTTGAGAGTCTATCACCCCTAGGGCCCTTTCCCGGATATAAACGCCAGGTTGAATCCGCATTTGGAGGTACGATGGATCAGTCTGGGTGGGGCGCGCCCCATTTATACCGTGAGTAGGGTCGACCAAGAACCGCAAGATGCGACGGTGTACAAGTAATTGTCAACAGACCATCGTGTTTTCATAATGGTACCAGGATCTTCAAGCCGTGTCAATCAAGCTCGGATTACGGTGTTTACTCCGTCCTGCGGTTACTCACGGTCTGTAATCCACCTCAAGTCAAGCCATTGCCTCTCTGAGACGCCGCATGAATTAATACGTATACTTTGCGCGGGTTCACTGCGATCCGTTCAGAGTCGTCCAAGGGCACAATCGAGCTCCCATTTGTATGTTCGGCTAACTTGTACCCAACCCCCGAAGTTTAGCAGGTCGTGGGGTGTCATGGAGCCTCTGGTTCATCCCGTGGGATATCAAGCTTCGTCTTGATAAAGCTCCCCGCTCGGGTGTAGCAGAGAAGACGCCTACTGAATTGTGCGATCCCTGCACCTCAGCTAAGGTAGCTACCAATATTTAGTTTCTAAGCCTTGCGACAGACCTCCCACTTAGATTGCCACGCATAGAGCTAGCGAGTCAGCGAAAAGCATGACGCGCTTTCAAGCGTGGCGAGTATGTGAACCAAGGCTTCGGACAGGACTATATACTTAGGTTTGATCTCGCCCCGAGAACTGTAAACCTCAACATTTATAGATTATAAGGTTAGCCGAAAATGCACGTGGTGGCGCCCGCCGACTGCTCCCTGAGTGTGGCTCTTTGTTCTGTCAACGCCCGACCTTCATCGCGGCCGATTCCTTCTGCGGACCATGTCGTCCTGATACTTTGGCCATGTTTCCGTTGTAGGAGTGAAGCCACTTGGCTTTGCGCCGTAGTTCCAATGAAAAACCTATGGACTTTGTTTAGGGTAGCATCAGGAATCTGAACCCTCAGAAAGTGGGGATCCCGGGTATAGACCTTTATCTGCGGTTCAAGTTAGGCATAAGGCTGCATGCTACCTTGTCACACCTACACTGCTCGAAGTAAATATGGGAAGCGTGCGACCTGGCTCCAGGCGTTCCGCGCCGCCACGTGTTCGTTAACTGTTGATTGGTGGCACATAAGTAATACCATGGTCCCTCAAATTCGGCTCAGTTACCTCGAGCGTTATGTCTCAAATGGCGTAGAACGGCATTGACTGTTTGACACTAGCTGGTGTTCGGTTCGGTAACGGAGAATCTGTGCGGCAATGTCATTAATACATTTGAAACGCGCCGTACCGATGCTGAGCAAGTCAGTGCAGGCTCCCGTGTTAGGATAAGGGTAAACATACAAGTCGATAGAAGATGGGTAGGGGCCTTCAATTCATCCAACACTCTACGGCTCCTCCGAGAGCTAGTAGGGCACCCTGTAGTTGGAAGGGGAACTATTTCGTGGGGCGAGCCCATACCGTCTCTCTTGCGGAAGACTTAACACGATAGGAAGCTGGAATAGTTTCGAACGATGGTTATTAATCCTAATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGAGTGTAACTCGATCAGTCACTCGCTATTCGAACTGGGCGAAAGATCCCAGCGCTCATGCACTTGATCCCGAGGCCTGACCCGATATATGAGCTCAGACTAGAGCGGGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGGGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGGGGATAGCGGTAGCTAACTAAGACGCCTGCCACAACAGCAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGAATTTCCTTTTGGATACCTGATACAAAGCCCATCGTGGTCCTTAGACTTCGTACACTTACACCTGCACCGCGCGCATGTGGAATTAGAGGCGAAGTACGATCCCTAGACCGACGTACGATGCAACTGTGTGGATGTGACGAGCTTCTTTTATATGCTTCGCCCGCCGGACCGGCCTCGGCATGGCGTAGCAGTGCACAAGCAAATGACAATTAACCACCGTGTATTCGTTATAACATCAGGCAGTTTAAGTCGGGACAATAGGAGCCGCAATACACAGTTTACCGCATCTTGACCTAACTGACATACTGCCATGGACGACTAGCCATGCCACTGGCTCTTAGATAGCCCGATACAGTGATTATGAAAGGTTTGCGGGGCATAGCTACGACTTGCTTAGCTACGTGCGAGGGAAGAAACTTTTGCGTATTTGTATGTTCACCCGTCTACTACCCATGCCCGGAGATTATGTAGGTTGTGAGATGCGGGAGAAGTTCTCGACCTTCCCGTGGGACGTCAACCTATCCCTTAATAGAGCATTCCGTTCGGGCATGGCAGTAAGTACGCCTTCTCAATTGTGCTAACCTTCATCCTTATCAAAGCTTGGAGCCAATGATCAGGATTATTGCCTTGCGACAGACTTCCTACTCACAGTCGCTCACATTGAGCTACTCGATGGGTCATCAGCTTGACCCGGTCTGTTGGGCCGCGATTACGTGAGTTAGGGCTCCGGACTGCGCTGTATAGTCGAATCTGATCCGGCCCCCACAACTGCAAACCCCAACTTATTTAGATAACATGATTAGCCGAAGTTGCACGGGGTGCCCACCGTGGAGTCCTCCCCGGGTGTCCCTCCTTCATTTGACGATAAGCAGCCGCTACCACCATCGATTAATACAAGGAACGGTGATGTTATCATAGATTCGGCACATTACCCTTGTAGGTGTGGAATCACTTAGCTACGCGCCGAAGTCTTATGGCAAAACCGATGGACAATGATTCGGGTAGCACTAAAAGTCCATAGCACGTGCATCCCAACGTGGCGTGCGTACAGCTTAACCACCGCTTCATGCTAAGGTGCTGGCTGCATGCTAAGTTGATACGCCTGCACTGCTCGAAGAAAATATACGAAGCGGGCGGCCTGGCCGGAGCACTACCCCATCGACGCGTACTCGAATACTGTTAATTGCTCACACATGAACAAAATAGTAGAGTGTCACTTTCAGCCCTCTTATCCTCGGCGATGTGTGTAAAATGGCGTTGATCTGGATTGACTCTATGACGGTATCTGCTGATGGGTAGGGAGATCCGGAATCTATCGGCCTATGTCACTGAAACTATCCAAACACCCCATGTCGATACTGAACGTATCGACGCATACCTCCTTCCTTGAAAACGCACAATCATACAACTGGGCACATAATGCGTACGCCCATCTAGTACACCCATCTCTGTAGGTCCAGTTCAAGAGCTGGAAGAGCACCCTCCACTTGGTCAAGTGATATCCTGGTAAGGTAAGCTCGTACCGTGATTCATGCGGCAGGGGTAAGACCATTAGAAGTAGGGATAGTCCCAAACCTCACTTACCACTGCCAATAAGGGGTCCTTATCTGAAGGATGAGTGTCAGCCAGTGTAACCCGATGAGGAACCCAGAAGCCGAACTGGGCCAGACAACCCGGCGCTAACGCACTCAAAGCCGGGACGCGACGCGACATAACGGCTAAGAGTAGCCCCGGAGTGTAGACCTTTGGGGTTGGATAAATCTGTCGTGGTAACCGGCTTCAACGACCCGTACACGTGGCACTTCAGGAGGCGCCCGCAGGGGGGAAGTTTTCTGCTATTCGAGGCCGTTCGTGGTAACTAGTTGCGTTCCTAGCCGCTATAATTGTTTCTATGCCGAGTAATGAGAACAACCACACCATAGCGATTTGACGCGGCGCCTCGGAATACCGTTTTGGCAGGCGCTTGCTAAGGCCATCGCGAATTCCAGGTATCGTGCATGTAGCGTAGGGCCGCACGCAAGTTAAACTGCTGGGGAACCGCGTTTCCACGACCGGTGCACGATTTAATTTCGCCGACGTGACGACATTCCTGCTAATGCCTCACCCGCCGGACCCCTCTCGTGATGGGGTAGCTGGACATGTCCTTGTGAGATATAACAAGAGCCTGCCTGTTTAATGATCTCACGGCGAAAGTCGGGGGGACAGCAGCGGCTGCAGACATTATACCGCAACAACACTAAGGTGAGATAACTCCGTAGTTGACTACGCATTCCTCTAGACCTTACTTGACCGGATACAGTGACTTTGACACGTTTGTGGGTTACAGCAATCACATCCAAGACTGCCTATGGAGGAAGCAACTCTTGAGTGTTAATATGTTGACCCCTGTATTAGGGATGCGGGTAGTAGATGAGCGCAGGGACACCGAGGTCAAGTACATTACCCTCTCATAGGAGGTGTTCTAGATCACCATACCACCATATCATTCGAGCATGACACTATCTGCGCTGTCCCCATCCTGGTAGTCATTATTCCTATCACGCTTTCGAGTGACTGGTGACGGATATCCCCCACGAATGAAAATCTTTTTCACTGACAGTCATATTGGGGTGCTCCTAAGCTTTTCCACTTGGCTGGGTCTGCTAGGCCTCCGTGCCCGGAGTTTCGGCGCTGTGCTGCCGAGAGCCGGCCATTGTCATTGGGGCCTCACTTGAGGATACCCCGACCTATTTTGTCGGGACCACTCGGGGTAGTCGTTGGGCTTATGCACCGTAAAGTCCTCCGCCGGCCTCCCCGCTACAGAAGATGATAAGCTCCGGCAAGCAATTATGAACAACGCAAGGATCGGCGATATAAACAGAGAAACGGCTGATTACACTTGTTCGTGTGGTATCGCTAAATAGCCTCGCGGAGCCTTATGCCATACTCGTCCGCGGAGCACTCTGGTAACGCTTATGGTCCATAGGACATTCATCGCTTCCGGGTATGCGCTCTATTTGACGATCCTTTGGCGCACAGATGCTGGCCACGAGCTAAATTAGAGCGACTGCACAACTGTAAGGTCCGTCACGCAGACGACGGCCCAGGGAGACCACTGACCCATCAACCTGTACGGGAACCTTCTGTATCGTTCTCGGACGGAGAGATAACTACAGTGCCGCTTACAGCCCCTCTGTCGTCGCCGACGTCTGTAATGTAGCCTCATTGTGATTCCACCCTATTGAGGCATTGACTGATGCGGGAAGAGATCTGAAATGAACTGGTCTATGCGACAGAAACTGTGCAGCTACCTAATCTCCTTAGTGTAGGTTCTGACCGATTCGTGCTTCGTTGAGAACTCACAATTTAACAACAGAGGACATAAGCCCTACGCCCATGATCTACTGACGTCCCTGAGGCTGCAATTCATGTAATGGGACAGTATCCGCGGCAAGTCCTAGTGCAATGGCGGTATTCTACCCTCGTACTGTAGTAGAGGCGACGCGGGTGCGGTCATCACTAATAAGGATATTGGGAAGACTCACAGGCCTCCGCCTTTAGGCGGTGCTTACTCTTACATAAAGGGGCTGTTAGTATTACCCCGCGAGGATTCGAAAAGGTGAGCCAACCCGGCCGATCCGGAGAGACGGGCCTCAAAGCCGCGTGACGACGGCTGTGGGCCCGTAACAAAATCCCCGCAATAAGCTCCCGTGAGCGTCGGTTGAACAGCCCTGGTCGGCCCCATCAGTAGCCCGAATATGTCGCTTTACGGGTCCTGGGCCGGGGTGCGATACCTTGCAGAAATCGAGGCCGTTCGTTAATTCCTGTTGCATTCGTACCGCCTATATTTGTCTCTTTGCCGGCTTATATGGACAAGCATAGCATAGCCATTTATCGGAGCGCCTCCGTACACGGTATGATCGGACGCCTCGTGAGATCAATACGTATACCAGGTGTCCTGTGAGCAGCGAAAGCCTATACGCGAGATACACTGCCAAAAATCCGCGTGATTACGAGTCGTGGCAAATTTGGTCTGGCTGTGGTCTAGACATTCCAGGCGGTGCGTCTGCTCTCGGGTGCCTCTAGTGGCTGGCTAGATAGACTAGCCGCTGGTAAACACACCATGACCCCGGCTCTCCATTGATGCCACGGCGATTGTTGGAGAGCCAGCAGCGACTGCAAACATCAGATCAGAGTAATACTAGCATGCGATA"
print "seq length %d" % len(seq)

# mutate seq
mut_seq = mutate(seq, mut_p, mut_map_p)
# diff_result = diff(seq, mut_seq)
diff_bits = bin_diff(seq, mut_seq)

aes = BinAES('password')
diff_cipher = aes.encrypt(diff_bits.tobytes())

print "diff size %d" % len(diff_bits.tobytes())
print "enc diff size %d" % len(diff_cipher)
with open("cipher", "w") as cipher_file:
    cipher_file.write(diff_cipher)

res_diff_bytes = aes.decrypt(diff_cipher)

# print mut_seq
# print diff_bits

res_diff_bits = bitarray()
res_diff_bits.frombytes(res_diff_bytes)

res_seq = restore(mut_seq, res_diff_bits)

print mut_seq
print res_seq
print seq
